红黑树

**背景**
一般的查询二叉树由于在极端情况下性能可能跟链表一样，导致性能较低，因此，需要一种相对平衡的二叉树，使得每次插入或者删除节点后其结构其结构还是相对平衡；

红黑树是一种查询二叉树，在传统的二叉树上，每个节点带上了颜色，节点的颜色要么是红色，要么是黑色；

* **红黑树的性质：**
  - 每个节点要么是黑色，要么是红色；

  - 根节点是黑色；

  - 每个叶子节点(nil)是黑色；

  - 如果节点颜色是红色，则其子节点颜色为黑色；

  - 每一个节点，其到所有叶子节点路径上，包含有相同数目的黑节点；

在描述红黑树前，先回顾一下查询二叉树的基本操作：

查询二叉树的基本操作

* **插入**

* **删除**

* **旋转**

  - 左旋转

  - 右旋转


* **插入节点**

  - 情况1

  - 情况2

  - 情况3


* **删除节点**


  - 情况1

  - 情况2

  - 情况3
  
  - 情况4

